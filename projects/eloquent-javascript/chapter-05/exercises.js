// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arr) {
  return arr.reduce((flat, x) => flat.concat(x), []);
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(val, test, update, body) {
  while(test(val)){
    body(val);
    val = update(val);
  }
}
// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(arr, test) {
  for(let i = 0; i < arr.length; i++){
    if(!test(arr[i])){
      return false;
    }
  }
  return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {
  // replace the spaces with empty strings
  let newStr = string.replace(/\s/g,"");
  // create arrays to store ltr and rtl scripts
  let ltr = [];
  let rtl = [];
  // iterate through newStr
  for(let i = 0; i < newStr.length; i++){
    let scriptName = characterScript(newStr.charCodeAt(i));
    // determine if scriptName is not null
    if(scriptName !== null){
      if(scriptName.direction === 'ltr'){
        ltr.push(scriptName)
      }
      else{
        rtl.push(scriptName);
      }
    }
  }
  return ltr.length > rtl.length ? 'ltr' : 'rtl';
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
